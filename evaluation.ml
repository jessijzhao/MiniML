(*
                         CS 51 Final Project
                         MiniML -- Evaluation
                             Spring 2018
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;

(* Exception for evaluator runtime, generated by a runtime error *)
exception EvalError of string ;;
(* Exception for evaluator runtime, generated by explicit "raise" constructs *)
exception EvalException ;;


(*......................................................................
  Environments and values
 *)

module type Env_type = sig
    type env
    type value =
      | Val of expr
      | Closure of (expr * env)
    val create : unit -> env
    val close : expr -> env -> value
    val lookup : env -> varid -> value
    val extend : env -> varid -> value ref -> env
    val env_to_string : env -> string
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : Env_type =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    (* Creates an empty environment *)
    let create () : env = [] ;;

    (* Creates a closure from an expression and the environment it's
       defined in *)
    let close (exp : expr) (env : env) : value = Closure (exp, env) ;;

    (* Looks up the value of a variable in the environment *)
    let lookup (env : env) (varname : varid) : value =
      try
        !(List.assoc varname env)
      with
        Not_found -> raise (EvalError ("Unbound variable" ^ varname )) ;;

    (* Returns a new environment just like env except that it maps the
       variable varid to loc *)
    let rec extend (env : env) (varname : varid) (loc : value ref) : env =
      match env with
      | [] -> [(varname, loc)]
      | (n, v) :: tl -> if n = varname then (n, loc) :: tl
                        else (n, v) :: (extend tl varname loc) ;;

    (* Returns a printable string representation of a value; the flag
       printenvp determines whether to include the environment in the
       string representation when called on a closure *)
    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      let etcs = exp_to_concrete_string in
      match v with
      | Val exp -> build "Val" [etcs exp]
      | Closure (exp, env) -> if printenvp then
                                build "Closure" [etcs exp; env_to_string env]
                              else build "Closure" [etcs exp; "env"]

    (* Returns a printable string representation of an environment *)
    and env_to_string (env : env) : string =
      match env with
        | [] -> "[]"
        | (n, v) :: tl -> n ^ " -> " ^ value_to_string !v ^ ", " ^
                          env_to_string tl ;;
  end ;;


(*......................................................................
  Evaluation functions

  Returns a result of type value of evaluating the expression exp
  in the environment env. We've provided an initial implementation
  for a trivial evaluator, which just converts the expression
  unchanged to a value and returns it, along with "stub code" for
  three more evaluators: a substitution model evaluator and dynamic
  and lexical environment model versions.

  Each evaluator is of type expr -> Env.env -> Env.value for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)

let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* A generic model evaluator for ALL OTHER MODEL EVALUATORS
   If substitution is true, then we have the substitution evaluator, and if
   dynamic is true then we have the dynamically scoped environment model
   evaluator, if dynamic is false we have the lexically scoped one. *)

let rec evaluate (substitution : bool)
                 (dynamic : bool)
                 (exp : expr)
                 (env : Env.env)
               : Env.value =
  let open Env in

  (* eval function that takes an environment *)
  let eval = evaluate substitution dynamic in

  (* eval that ignores invironment, e.g. for substitution model *)
  let eval' exp = eval exp env in

  (* returns error with given string *)
  let oops (str : string) =
    raise (EvalError str) in

  (* returns evaluated expression as expr instead of as Env.value *)
  let eval_to_exp (value : expr) : expr =
    match eval' value with
    | Val exp -> exp
    | _ -> oops "Type Error" in

  (* where the actual evaluation will take place *)
  match exp with
  | Var x -> if substitution then oops ("Unbound value " ^ x)
             else lookup env x
  | Num _ | Bool _ -> Val exp
  | Unop (u, e) -> (match u with
                    |Negate -> eval' (Binop(Times, Num ~-1, e)))
  | Binop (b, e1, e2) ->
     (match eval_to_exp e1, eval_to_exp e2 with
      | Num n,  Num m  -> (match b with
                           | Plus -> Val (Num (n + m))
                           | Minus -> Val (Num (n - m))
                           | Times -> Val (Num (n * m))
                           | Equals -> Val (Bool (n = m))
                           | LessThan -> Val (Bool (n < m)))
      | Bool n, Bool m -> if b = Equals then Val (Bool (n = m))
                          else oops "Bools can't do that binop!"
      | _ -> oops "Binop called on invalid types")
  | Conditional (i, t, e) ->
     (match eval_to_exp i with
      | Bool cond -> if cond then eval' t else eval' e
      | _ -> raise (EvalError "Condition must be of type bool"))
  | Fun _ -> if substitution || dynamic then Val exp
             else close exp env
  | Let (x, def, body) -> if substitution then
                            eval' (subst x (eval_to_exp def) body)
                          else
                            eval body (extend env x (ref (eval' def)))
  | Letrec (x, def, body) -> if substitution then
                               let def' = subst x (Letrec(x, def, Var x)) def in
                               eval' (subst x (eval_to_exp def') body)
                             else
                               let x' = ref (Val Unassigned) in
                               let env' = extend env x x' in
                               x' := eval def env'; eval body env'
  | Raise -> raise EvalException
  | Unassigned -> oops "Unassigned"
  | App (f, app) -> if substitution then
                      (match eval_to_exp f with
                       | Fun (x, def) -> eval' (subst x (eval_to_exp app) def)
                       | _ -> oops "Nonfunction acannot be applied")
                    else if dynamic then
                      (match eval_to_exp f with
                       | Fun (x, def) ->
                          eval def (extend env x (ref (eval' app)))
                       | _ -> oops "Nonfunction bcannot be applied")
                    else
                      (match eval' f with
                       | Closure (Fun (x, def), env') ->
                            eval def (extend env' x (ref (eval' app)))
                       | _ -> oops "Nonfunction ccannot be applied");;

(* The SUBSTITUTION MODEL evaluator *)
let eval_s = evaluate true true ;;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator  *)
let eval_d = evaluate false true ;;

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator *)
let eval_l = evaluate false false ;;

(* Connecting the evaluators to the external world. The REPL in
   miniml.ml uses a call to the single function evaluate defined
   here. *)

let evaluate = eval_l ;;
